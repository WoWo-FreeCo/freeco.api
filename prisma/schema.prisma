// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CheckContentInSequence {
  index     Int     @id @db.UnsignedInt
  video     String?
  credit    Int
  isMission Boolean
}

model UserDailyCheck {
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)

  @@id([userId, createdAt])
}

model UserActivation {
  YouTubeChannelActivated Boolean @default(false)
  FacebookGroupActivated  Boolean @default(false)
  IGFollowActivated       Boolean @default(false)
  VIPActivated            Boolean @default(false)
  SVIPActivated           Boolean @default(false)
  InputVIPCode            String?
  InputSVIPCode           String?
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                  String  @unique @db.VarChar(36)
}

model User {
  id               String            @id @default(uuid()) @db.VarChar(36)
  email            String            @unique
  password         String?
  nickname         String?
  cellphone        String?            @unique @db.VarChar(15)
  telephone        String?           @db.VarChar(15)
  city             String?
  district         String?
  zipCode          String?
  addressOne       String?
  addressTwo       String?
  addressThree     String?
  taxIDNumber      String?           @db.VarChar(18)
  rewardCredit     Int?
  recommendCode    String?            @unique @db.VarChar(36)
  recommendedBy    String?           @db.VarChar(36)
  activation       UserActivation?
  googleUser       GoogleUser?
  facebookUser     FacebookUser?
  dailyChecks      UserDailyCheck[]
  orders           Order[]
  bonusPoints      BonusPoint[]
  shoppingSessions ShoppingSession[]
  type             DateTime?         @db.Timestamp(0)
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime          @updatedAt @db.Timestamp(0)
  ActivityComment  ActivityComment[]

  @@index([cellphone])
  @@index([taxIDNumber])
  @@index([email])
}

model AdminUser {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([email])
}

model GoogleUser {
    id               String           @id @default(uuid()) @db.VarChar(36)
    accountId        String           @db.VarChar(255)
    email            String?          @unique
    family_name      String?          @db.VarChar(255)
    given_name       String?          @db.VarChar(255)
    gsuite_domain    String?          @db.VarChar(255)
    locale           String?          @db.VarChar(10)
    name             String?          @db.VarChar(255)
    picture          String?          @db.VarChar(255)
    status           Int              @default(0) @db.TinyInt()
    last_login_at    DateTime?        @db.Timestamp(0)
    user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId           String?          @unique @db.VarChar(36)

    @@index([accountId, email])
}

model FacebookUser {
    id               String           @id @default(uuid()) @db.VarChar(36)
    asid             String           @db.VarChar(500)
    email            String?          @unique
    name             String?          @db.VarChar(255)
    first_name       String?          @db.VarChar(255)
    last_name        String?          @db.VarChar(255)
    middle_name      String?          @db.VarChar(255)
    picture          String?          @db.VarChar(255)
    status           Int              @default(0) @db.TinyInt()
    last_login_at    DateTime?        @db.Timestamp(0)
    user             User?            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId           String?          @unique @db.VarChar(36)
    
    @@index([asid, email])
}

// enum BonusPointActivityType {
//   // 會員註冊
//   REGISTER
//   // 會員升級VIP
//   UPG_VIP
//   // 會員升級SVIP
//   UPG_SVIP
//   // 消費回饋
//   REWARD
//   // 使用紅利
//   REDEEM
// }

model BonusPoint {
  id        Int             @id @default(autoincrement())
  // activityType BonusPointActivityType
  rule         BonusPointRule?        @relation(fields: [ruleId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  ruleId       Int?
  user         User                   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       String                 @db.VarChar(36)
  points       Int
  createdAt    DateTime               @default(now()) @db.Timestamp(0)
  updatedAt    DateTime               @updatedAt @db.Timestamp(0)
  Order        Order[]
}

model BonusPointRule {
  id        Int      @id @default(autoincrement())
  name      String
  rule      Int
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  bonusPointRecords  BonusPoint[]
}

enum OrderStatus {
  // 待付款
  WAIT_PAYMENT
  // 待出貨
  WAIT_DELIVER
  // 待收貨
  WAIT_RECEIVE
  // 已完成
  COMPLETED
  // 已取消
  CANCELLED
  // 退貨/退款
  REVOKED
}

enum DeliveryType {
  // 宅配
  HOME
  // 超商取貨
  STORE
}

model Order {
  id                     String            @id @db.VarChar(19)
  user                   User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                 String            @db.VarChar(36)
  merchantTradeNo        String            @unique @db.VarChar(20)
  relateNumber           String            @unique @db.VarChar(30)
  orderStatus            OrderStatus
  consignee              OrderConsignee?
  orderItems             OrderItem[]
  price                  Int
  attribute              ProductAttribute
  createdAt              DateTime          @default(now()) @db.Timestamp(0)
  updatedAt              DateTime          @updatedAt @db.Timestamp(0)
  invoiceInfo            OrderInvoiceInfo?
  bonusPointRedemption   BonusPoint?       @relation(fields: [bonusPointRedemptionId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  bonusPointRedemptionId Int?
  revokeInformation      OrderRevoke?

  @@index([merchantTradeNo])
  @@index([relateNumber])
  @@index([userId, orderStatus])
  @@index([orderStatus, createdAt])
}

model OrderInvoiceInfo {
  order              Order   @relation(fields: [orderRelateNumber], references: [relateNumber], onDelete: Cascade, onUpdate: Cascade)
  orderRelateNumber  String  @id @db.VarChar(30)
  customerID         String? @db.VarChar(20)
  customerIdentifier String? @db.VarChar(8)
  customerName       String? @db.VarChar(20)
  customerAddr       String? @db.VarChar(100)
  customerPhone      String? @db.VarChar(15)
  customerEmail      String? @db.VarChar(80)
  clearanceMark      String? @db.VarChar(1)
  print              String  @db.VarChar(1)
  donation           String  @db.VarChar(1)
  loveCode           String? @db.VarChar(7)
  carruerType        String? @db.VarChar(1)
  carruerNum         String? @db.VarChar(16)
  taxType            String  @db.VarChar(1)
  salesAmount        String
  remark             String? @db.Text
  itemName           String  @db.Text
  itemCount          String  @db.Text
  itemWord           String  @db.Text
  itemPrice          String  @db.Text
  itemTaxType        String? @db.Text
  itemAmount         String  @db.Text
  itemRemark         String  @db.Text
  invType            String  @db.VarChar(2)
  vat                String  @db.VarChar(1)
}

model OrderConsignee {
  deliveryType              DeliveryType
  addressDetailOne          String?
  addressDetailTwo          String?
  city                      String?
  countryCode               String?
  district                  String?
  name                      String?
  email                     String?
  idNo                      String?
  idType                    String?
  cellphone                 String?
  province                  String?
  remark                    String?      @db.Text
  stationCode               String?
  stationName               String?
  town                      String?
  zipCode                   String?
  senderRemark              String?      @db.Text
  requiredDeliveryDates     String?
  requiredDeliveryTimeslots String?
  codAmount                 Int
  currencyCode              String       @db.VarChar(20)
  order                     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId                   String       @id @db.VarChar(19)
}

model OrderItem {
  id               Int      @id @default(autoincrement())
  name             String
  price            Int
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId          String   @db.VarChar(19)
  productId        Int?
  productSkuId     String?  @db.VarChar(20)
  quantity         Int
  productFromId    Product? @relation("productFromId", fields: [productId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  productFromSkuId Product? @relation("productFromSkuId", fields: [productSkuId], references: [skuId], onDelete: SetNull, onUpdate: Cascade)
}

enum OrderRevokeInvoiceStatus {
  // 未開立發票
  UNISSUED
  // 等待作廢發票
  WAIT_CANCEL
  // 已作廢發票
  CANCELLED
}

enum OrderRevokePaymentStatus {
  // 未付款
  UNPAIED
  // 等待退款
  WAIT_REFUND
  // 已退款
  REFUNDED
}

enum OrderRevokeLogisticsStatus {
  // 等待取消物流
  WAIT_CANCEL
  // 已取消物流
  CANCELLED
}

model OrderRevoke {
  invoiceStatus   OrderRevokeInvoiceStatus
  paymentStatus   OrderRevokePaymentStatus
  logisticsStatus OrderRevokeLogisticsStatus
  order           Order                      @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId         String                     @id @db.VarChar(19)
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  products  Product[]
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
}

enum ProductAttribute {
  GENERAL
  COLD_CHAIN
}

model Product {
  id                   Int                   @id @default(autoincrement())
  skuId                String?               @unique @db.VarChar(20)
  name                 String
  coverImagePath       String?
  price                Int
  memberPrice          Int
  vipPrice             Int
  svipPrice            Int
  attribute            ProductAttribute      @default(GENERAL)
  category             ProductCategory?      @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  categoryId           Int?
  orderItemsById       OrderItem[]           @relation("productFromId")
  orderItemsBySkuId    OrderItem[]           @relation("productFromSkuId")
  createdAt            DateTime              @default(now()) @db.Timestamp(0)
  updatedAt            DateTime              @updatedAt @db.Timestamp(0)
  productImages        ProductImage[]
  productMarkdownInfos ProductMarkdownInfo[]
  inventory            ProductInventory?
  cartItems            CartItem[]
}

model ProductInventory {
  quantity  Int      @default(0)
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int      @id
}

model ProductImage {
  index     Int
  imagePath String
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int

  @@id([productId, index])
}

model ProductMarkdownInfo {
  index     Int
  title     String
  text      String   @db.Text
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int

  @@id([productId, index])
}

model ShoppingSession {
  id        Int              @id @default(autoincrement())
  attribute ProductAttribute
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String           @db.VarChar(36)
  cartItems CartItem[]
  createdAt DateTime         @default(now()) @db.Timestamp(0)
  updatedAt DateTime         @updatedAt @db.Timestamp(0)
}

model CartItem {
  id                Int             @id @default(autoincrement())
  shoppingSession   ShoppingSession @relation(fields: [shoppingSessionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shoppingSessionId Int
  product           Product?        @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId         Int?
  quantity          Int
  createdAt         DateTime        @default(now()) @db.Timestamp(0)
  updatedAt         DateTime        @updatedAt @db.Timestamp(0)
}

model HomeBanner {
  id        Int      @id @default(autoincrement())
  img       String   @db.VarChar(255)
  href      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model WebPage {
  id        Int      @id @default(autoincrement())
  name      String
  content   String   @db.LongText
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

enum DeliveryFeeRuleType {
  FEE
  THRESHOLD
}

model DeliveryFeeRule {
  id        Int                 @id @default(autoincrement())
  name      String
  ruleType  DeliveryFeeRuleType
  rule      Int
  createdAt DateTime            @default(now()) @db.Timestamp(0)
  updatedAt DateTime            @updatedAt @db.Timestamp(0)
}

model Activity {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(255)
  text            String            @db.LongText
  videoUrls       Json
  answer          String            @db.VarChar(255)
  awardee         String            @db.VarChar(255)
  startAt         DateTime          @db.Timestamp(0)
  endAt           DateTime          @db.Timestamp(0)
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @updatedAt @db.Timestamp(0)
  ActivityComment ActivityComment[]
}

model ActivityComment {
  id         Int      @id @default(autoincrement())
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String   @db.VarChar(36)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text       String   @db.LongText
  createdAt  DateTime @default(now()) @db.Timestamp(0)

  @@index([activityId])
}
