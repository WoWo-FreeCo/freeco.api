// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model CheckContentInSequence {
  index     Int     @id @db.UnsignedInt
  video     String?
  credit    Int
  isMission Boolean
}

model UserDailyCheck {
  createdAt DateTime @default(now()) @db.Timestamp(0)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)

  @@id([userId, createdAt])
}

model UserActivation {
  YouTubeChannelActivated Boolean @default(false)
  FacebookGroupActivated  Boolean @default(false)
  IGFollowActivated       Boolean @default(false)
  VIPActivated            Boolean @default(false)
  SVIPActivated           Boolean @default(false)
  user                    User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                  String  @unique @db.VarChar(36)
}

model User {
  id            String           @id @default(uuid()) @db.VarChar(36)
  email         String           @unique
  password      String
  nickname      String?
  cellphone     String           @unique @db.VarChar(15)
  telephone     String?          @db.VarChar(15)
  addressOne    String
  addressTwo    String?
  addressThree  String?
  taxIDNumber   String?          @db.VarChar(18)
  rewardCredit  Int
  recommendCode String           @unique @db.VarChar(36)
  recommendedBy String?          @db.VarChar(36)
  activation    UserActivation?
  dailyChecks   UserDailyCheck[]
  orders        Order[]
  createdAt     DateTime         @default(now()) @db.Timestamp(0)
  updatedAt     DateTime         @updatedAt @db.Timestamp(0)

  @@index([cellphone])
  @@index([taxIDNumber])
  @@index([email])
}

model AdminUser {
  id        String   @id @default(uuid()) @db.VarChar(36)
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)

  @@index([email])
}

enum OrderStatus {
  // 待付款
  WAIT_PAYMENT
  // 待出貨
  WAIT_DELIVER
  // 待收貨
  WAIT_RECEIVE
  // 已完成
  COMPLETED
  // 已取消
  CANCELLED
  // 退貨/退款
  REVOKED
}

enum DeliveryType {
  // 宅配
  HOME
  // 超商取貨
  STORE
}

model Order {
  id              String            @id @db.VarChar(19)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          String            @db.VarChar(36)
  merchantTradeNo String            @unique @db.VarChar(20)
  relateNumber    String            @unique @db.VarChar(30)
  orderStatus     OrderStatus
  consignee       OrderConsignee?
  orderItems      OrderItem[]
  price           Int
  attribute       ProductAttribute
  createdAt       DateTime          @default(now()) @db.Timestamp(0)
  updatedAt       DateTime          @updatedAt @db.Timestamp(0)
  invoiceInfo     OrderInvoiceInfo?

  @@index([merchantTradeNo])
  @@index([relateNumber])
  @@index([userId, orderStatus])
  @@index([orderStatus, createdAt])
}

model OrderInvoiceInfo {
  order              Order   @relation(fields: [orderRelateNumber], references: [relateNumber], onDelete: Cascade, onUpdate: Cascade)
  orderRelateNumber  String  @id @db.VarChar(30)
  customerID         String? @db.VarChar(20)
  customerIdentifier String? @db.VarChar(8)
  customerName       String? @db.VarChar(20)
  customerAddr       String? @db.VarChar(100)
  customerPhone      String? @db.VarChar(15)
  customerEmail      String? @db.VarChar(80)
  clearanceMark      String? @db.VarChar(1)
  print              String  @db.VarChar(1)
  donation           String  @db.VarChar(1)
  loveCode           String? @db.VarChar(7)
  carruerType        String? @db.VarChar(1)
  carruerNum         String? @db.VarChar(16)
  taxType            String  @db.VarChar(1)
  salesAmount        String
  remark             String? @db.Text
  itemName           String  @db.Text
  itemCount          String  @db.Text
  itemWord           String  @db.Text
  itemPrice          String  @db.Text
  itemTaxType        String? @db.Text
  itemAmount         String  @db.Text
  itemRemark         String  @db.Text
  invType            String  @db.VarChar(2)
  vat                String  @db.VarChar(1)
}

model OrderConsignee {
  deliveryType              DeliveryType
  addressDetailOne          String?
  addressDetailTwo          String?
  city                      String?
  countryCode               String?
  district                  String?
  name                      String?
  email                     String?
  idNo                      String?
  idType                    String?
  cellphone                 String?
  province                  String?
  remark                    String?      @db.Text
  stationCode               String?
  stationName               String?
  town                      String?
  zipCode                   String?
  senderRemark              String?      @db.Text
  requiredDeliveryDates     String?
  requiredDeliveryTimeslots String?
  codAmount                 Int
  currencyCode              String       @db.VarChar(20)
  order                     Order        @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId                   String       @id @db.VarChar(19)
}

model OrderItem {
  id               Int      @id @default(autoincrement())
  name             String
  price            Int
  order            Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId          String   @db.VarChar(19)
  productId        Int?
  productSkuId     String?  @db.VarChar(20)
  quantity         Int
  productFromId    Product? @relation("productFromId", fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productFromSkuId Product? @relation("productFromSkuId", fields: [productSkuId], references: [skuId], onDelete: Restrict, onUpdate: Cascade)
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(0)
  products  Product[]
  updatedAt DateTime  @updatedAt @db.Timestamp(0)
}

enum ProductAttribute {
  GENERAL
  COLD_CHAIN
}

model Product {
  id                Int              @id @default(autoincrement())
  skuId             String?          @unique @db.VarChar(20)
  name              String
  price             Int
  memberPrice       Int
  vipPrice          Int
  svipPrice         Int
  attribute         ProductAttribute @default(GENERAL)
  category          ProductCategory? @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  categoryId        Int?
  orderItemsById    OrderItem[]      @relation("productFromId")
  orderItemsBySkuId OrderItem[]      @relation("productFromSkuId")
  createdAt         DateTime         @default(now()) @db.Timestamp(0)
  updatedAt         DateTime         @updatedAt @db.Timestamp(0)
  productImages     ProductImage[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  product   Product? @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  productId Int?
  imagePath String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}

model HomeBanner {
  id        Int      @id @default(autoincrement())
  img       String   @db.VarChar(255)
  href      String   @db.VarChar(255)
  createdAt DateTime @default(now()) @db.Timestamp(0)
}

model WebPage {
  id        Int      @id @default(autoincrement())
  name      String
  content   String   @db.LongText
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
}
